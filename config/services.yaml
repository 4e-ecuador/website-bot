# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: es
    locales: [en, es, de]
    telegram_web_hook_secret: '%env(TELEGRAM_WEB_HOOK_SECRET)%'
    app.email: '%env(APP_EMAIL)%'
    app.email.name: '%env(APP_EMAIL_NAME)%'
    app.default_lat: -1.262326
    app.default_lon: -79.09357
    telegram_route_secret: '%env(TELEGRAM_WEBHOOK_SECRET)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $rootDir: '%kernel.project_dir%'
            $appEnv: '%env(APP_ENV)%'
            $defaultTimeZone: '%env(DEFAULT_TIMEZONE)%'
            $pageBaseUrl: '%env(PAGE_BASE_URL)%'
            $announceAdminCc: '%env(ANNOUNCE_ADMIN_CC)%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    App\EventListener\:
        resource: ../src/EventListener/*
        tags: [kernel.event_listener]

    App\Command\AndroidNotificationCommand:
        arguments:
            $fcmKey: '%env(FCM_KEY)%'

    App\Command\SortLanguageFilesCommand:
        arguments:
            $locale: '%locale%'
            $locales: '%locales%'

    App\Form\AgentAccountType:
        arguments:
            $locales: '%locales%'

    App\Service\TelegramBotHelper:
        arguments:
            $botName: '%env(TELEGRAM_BOT_NAME)%'
            $groupIdDefault: '%env(ANNOUNCE_GROUP_ID_1)%'
            $groupIdAdmin: '%env(ANNOUNCE_GROUP_ID_ADMIN)%'
            $groupIdIntro: '%env(ANNOUNCE_GROUP_ID_INTRO)%'
            $groupIdTest: '%env(ANNOUNCE_GROUP_ID_TEST)%'

    App\Service\FcmHelper:
        arguments:
            $fcmKey: '%env(FCM_KEY)%'
            $channelId: '%env(FCM_CHANNEL_ID)%'

    App\Service\MailerHelper:
        arguments:
            $email: '%app.email%'
            $emailName: '%app.email.name%'

    App\Security\GoogleApiClient:
        arguments:
            $clientId: '%env(OAUTH_GOOGLE_ID_WEB)%'
            $clientSecret: '%env(OAUTH_GOOGLE_SECRET_WEB)%'

    App\EventListener\UserChangedNotifier:
        tags:
            - # these are the basic options that define the entity listener
                name: 'doctrine.orm.entity_listener'
                event: 'postUpdate'
                entity: 'App\Entity\User'

                # set the 'lazy' option to TRUE to only instantiate listeners when they are used
                lazy: true

                # you can also associate an entity listener to a specific entity manager
                # entity_manager: 'custom'

                # by default, Symfony looks for a method called after the event (e.g. postUpdate())
                # if it doesn't exist, it tries to execute the '__invoke()' method, but you can
                # configure a custom method name with the 'method' option
                # method: 'postUpdate'
